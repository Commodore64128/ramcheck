
; 64tass Turbo Assembler Macro V1.53.1515 listing file
; 64tass -a -l target\ramcheck.lbl -L target\ramcheck.lst -o target\ramcheck src\ramcheck.asm
; Wed Feb 02 08:44:12 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: src\ramcheck.asm


;******  Processing file: src\macros.asm


;******  Return to file: src\ramcheck.asm

>0801	0b 08 d5 07			    .word (+), 2005
>0805	9e 32 30 36 31 00		    .null $9e, format("%d",start)
>080b	00 00				 +  .word 0
.080d					start:
.080d	a9 45		lda #$45	    lda #<msg1      ; print the welcome message
.080f	85 fe		sta $fe		    sta $fe
.0811	a9 08		lda #$08	    lda #>msg1
.0813	85 ff		sta $ff		    sta $ff
.0815	20 37 08	jsr $0837	    jsr print
.0818					loop:
.0818	ad 61 08	lda $0861	    lda msg3+1      ; get bank number
.081b	c9 39		cmp #$39	    cmp #$39        ; = 9 ?
.081d	f0 17		beq $0836	    beq end         ; if so, end
.081f	18		clc		    clc             ; if not, add one
.0820	69 01		adc #$01	    adc #$01
.0822	8d 61 08	sta $0861	    sta msg3+1      ; store the new bank number
.0825					dotest:
.0825	20 67 08	jsr $0867	    jsr ramtest     ; execute the test
.0828					prtbank:
.0828	a9 5a		lda #$5a	    lda #<msg2      ; print "Bank nn " (checkmark or X)
.082a	85 fe		sta $fe		    sta $fe
.082c	a9 08		lda #$08	    lda #>msg2
.082e	85 ff		sta $ff		    sta $ff
.0830	20 37 08	jsr $0837	    jsr print
.0833	4c 18 08	jmp $0818	    jmp loop
.0836					end:
.0836	60		rts		    rts
.0837					print:
.0837	a0 00		ldy #$00	    ldy #$00
.0839					nextch:
.0839	b1 fe		lda ($fe),y	    lda ($fe),y
.083b	f0 07		beq $0844	    beq +
.083d	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0840	c8		iny		    iny
.0841	4c 39 08	jmp $0839	    jmp nextch
.0844	60		rts		+   rts
.0845					msg1:
>0845	93 0e d3 55 50 45 52 c3		    .text $93,$0e,"SuperCPU Ramcheck",$0d,$00
>084d	d0 d5 20 d2 41 4d 43 48 45 43 4b 0d 00
.085a					msg2:
>085a	0d c2 41 4e 4b 20		    .text $0d,"Bank "
.0860					msg3:
>0860	30 32 20 00 00 00 00		    .byte $30, $32, $20, $00, $00, $00, $00
.0867					ramtest:
.0867	18		clc		                clc
.0868	fb		xce		                xce
.0869	e2 20		sep #$20	                SEP #$20
.086b	ad 61 08	lda $0861	    lda msg3+1          ; switch to data bank #n
.086e	38		sec		    sec
.086f	e9 30		sbc #$30	    sbc #$30
.0871	48		pha		                pha                     ; push the value to the stack
.0872	ab		plb		                plb                     ; pull value from stack to data bank register
.0873	c2 10		rep #$10	                REP #$10
.0875					storeram:
.0875	a0 00 00	ldy #$0000	    ldy #$0000          ; loop through entire bank memory
.0878	a9 a0		lda #$a0	    lda #$a0
.087a	99 00 00	sta $0000,y	-   sta $0000,y         ; populate entire bank with $a0
.087d	c8		iny		    iny
.087e	c0 00 00	cpy #$0000	    cpy #$0000
.0881	d0 f7		bne $087a	    bne -
.0883					loadram:
.0883	a0 00 00	ldy #$0000	    ldy #$0000          ; loop through entire bank memory
.0886	b9 00 00	lda $0000,y	-   lda $0000,y
.0889	c9 a0		cmp #$a0	    cmp #$a0            ; check against $a0
.088b	d0 12		bne $089f	    bne rambad
.088d	c8		iny		    iny
.088e	c0 00 00	cpy #$0000	    cpy #$0000
.0891	d0 f3		bne $0886	    bne -
.0893					ramgood:
.0893	a9 00		lda #$00	    lda #$00            ; set databank to 0
.0895	48		pha		                pha                     ; push the value to the stack
.0896	ab		plb		                plb                     ; pull value from stack to data bank register
.0897	a9 fa		lda #$fa	    lda #$fa            ; print a checkmark
.0899	8d 63 08	sta $0863	    sta msg3+3
.089c	4c a8 08	jmp $08a8	    jmp cleanup
.089f					rambad:
.089f	a9 00		lda #$00	    lda #$00            ; set databank to 0
.08a1	48		pha		                pha                     ; push the value to the stack
.08a2	ab		plb		                plb                     ; pull value from stack to data bank register
.08a3	a9 d8		lda #$d8	    lda #'X'            ; print an X
.08a5	8d 63 08	sta $0863	    sta msg3+3
.08a8					cleanup:
.08a8	38		sec		                sec
.08a9	fb		xce		                xce
.08aa	60		rts		    rts

;******  End of listing
